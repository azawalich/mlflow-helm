apiVersion: apps/v1
kind: Deployment
metadata:
  name: mlflow-database-deployment
  namespace: f1-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mlflow-db
  template:
    metadata:
      labels:
        app: mlflow-db
    spec:
      containers:
      - name: mlflow-db
        image: docker.io/postgres:16.2
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
        livenessProbe:
          tcpSocket:
            port: 5432
          initialDelaySeconds: 15
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 5432
          initialDelaySeconds: 15
          periodSeconds: 10
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: mlflow-database-secret
              key: database_username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mlflow-database-secret
              key: database_password
        - name: POSTGRES_DB
          value: mlflowdb
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mlflow-dashboard-deployment
  namespace: f1-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mlflow-dashboard
  template:
    metadata:
      labels:
        app: mlflow-dashboard
    spec:
      initContainers:
      - name: mlflow-wait-for-database
        image: docker.io/busybox:1.36.1
        command: ['sh', '-c', 'echo "Sleeping for 30 seconds..."; sleep 30;']
      containers:
      - name: mlflow-dashboard
        image: docker.io/evk02/mlflow:2.4.2
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5000
        livenessProbe:
          tcpSocket:
            port: 5000
          initialDelaySeconds: 15
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 5000
          initialDelaySeconds: 15
          periodSeconds: 10
        env:
        - name: POSTGRES_DATABASE
          value: mlflowdb
        - name: DATABASE_PORT
          value: "5432"
        - name: DATABASE_HOST
          value: mlflow-database-service
        - name: MLFLOW_S3_ENDPOINT_URL
          value: http://minio-service:9000
        - name: MLFLOW_S3_IGNORE_TLS
          value: "true"
        #TODO: add PVC because the data is lost after restart of a service 
        # maybe move other binary files (models) to store AND read it from minio in another helm charts
        #TODO: introduce stuff from here, read it carefully: 
        #       https://blog.min.io/setting-up-a-development-machine-with-mlflow-and-minio/
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: minio-dashboard-secret
              key: access_key
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: minio-dashboard-secret
              key: secret_key
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: mlflow-database-secret
              key: database_username
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mlflow-database-secret
              key: database_password
        command: ["mlflow", "server"]
        args: [
          "--backend-store-uri", "postgresql://$(DATABASE_USER):$(DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(POSTGRES_DATABASE)", 
          "--serve-artifacts",
          "--artifacts-destination", "s3://mlflow", 
          "--host", "0.0.0.0", 
          "--port", "5000"
          ]